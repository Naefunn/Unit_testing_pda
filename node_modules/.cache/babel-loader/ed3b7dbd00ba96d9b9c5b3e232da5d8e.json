{"ast":null,"code":"var _jsxFileName = \"/Users/nathanfoster/codeclan_work/week_08/day_1/2_react_testing_lab/react_calculator/src/containers/Calculator.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport KeyPad from '../components/KeyPad';\nimport '../App.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction App() {\n  _s();\n\n  const [previousTotal, setPreviousTotal] = useState(0);\n  const [runningTotal, setRunningTotal] = useState(0);\n  const [previousOperator, setPreviousOperator] = useState(null);\n  const [newTotal, setNewTotal] = useState(true);\n  const [calculatedTotal, setCalculatedTotal] = useState(0);\n\n  const numberClick = number => {\n    let tempTotal = runningTotal;\n\n    if (runningTotal === 0 || newTotal) {\n      if (calculatedTotal) {\n        setPreviousTotal(calculatedTotal);\n      } else {\n        setPreviousTotal(runningTotal);\n      }\n\n      tempTotal = 0;\n      setNewTotal(false);\n    }\n\n    setRunningTotal(parseFloat(\"\" + tempTotal + number));\n  };\n\n  const handleDecimal = () => {\n    if (!runningTotal.toString().includes(\".\")) setRunningTotal(runningTotal + \".\");\n  };\n\n  const clearClick = () => {\n    if (runningTotal === 0) {\n      setPreviousOperator(null);\n      setPreviousTotal(null);\n      setCalculatedTotal(0);\n    }\n\n    setRunningTotal(0);\n  };\n\n  const operatorClick = operator => {\n    // if there was a previous operator recorded as having been clicked, perform\n    // the operation for the previous operator\n    if (previousTotal && previousOperator) {\n      switch (previousOperator) {\n        case \"+\":\n          add(runningTotal);\n          break;\n\n        case \"-\":\n          subtract(runningTotal);\n          break;\n\n        case \"*\":\n          multiply(runningTotal);\n          break;\n\n        case \"/\":\n          divide(runningTotal);\n          break;\n      }\n    } // if the 'equals' button was clicked, clear the previous operator, otherwise\n    // record what the previous operator was\n\n\n    if (operator === \"=\") {\n      setPreviousOperator(null);\n    } else {\n      setPreviousOperator(operator);\n    } // replace the previous total with the current running total and flag that a\n    // new total has been calculated\n\n\n    setPreviousTotal(runningTotal);\n    setNewTotal(true);\n  };\n\n  const add = number => {\n    let calculatedNumber = parseFloat(previousTotal) + parseFloat(number);\n    setRunningTotal(calculatedNumber);\n    setCalculatedTotal(calculatedNumber);\n  };\n\n  const subtract = number => {\n    let calculatedNumber = parseFloat(previousTotal) - parseFloat(number);\n    setRunningTotal(calculatedNumber);\n    setCalculatedTotal(calculatedNumber);\n  };\n\n  const multiply = number => {\n    let calculatedNumber = parseFloat(previousTotal) * parseFloat(number);\n    setRunningTotal(calculatedNumber);\n    setCalculatedTotal(calculatedNumber);\n  };\n\n  const divide = number => {\n    let calculatedNumber = parseFloat(previousTotal) / parseFloat(number);\n    setRunningTotal(calculatedNumber);\n    setCalculatedTotal(calculatedNumber);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"calculator\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        \"data-testid\": \"running-total\",\n        id: \"running-total\",\n        className: \"display\",\n        children: runningTotal\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 105,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(KeyPad, {\n        handleNumber: numberClick,\n        handleOperator: operatorClick,\n        handleClear: clearClick,\n        handleDecimal: handleDecimal\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 106,\n        columnNumber: 7\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 5\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 103,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"6r443YzRMgVbgdn/xTSHdLHwcRI=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","KeyPad","App","previousTotal","setPreviousTotal","runningTotal","setRunningTotal","previousOperator","setPreviousOperator","newTotal","setNewTotal","calculatedTotal","setCalculatedTotal","numberClick","number","tempTotal","parseFloat","handleDecimal","toString","includes","clearClick","operatorClick","operator","add","subtract","multiply","divide","calculatedNumber"],"sources":["/Users/nathanfoster/codeclan_work/week_08/day_1/2_react_testing_lab/react_calculator/src/containers/Calculator.js"],"sourcesContent":["import React, {useState} from 'react';\nimport KeyPad from '../components/KeyPad';\nimport '../App.css';\n\nfunction App() {\n\n  const [previousTotal, setPreviousTotal] = useState(0); \n  const [runningTotal , setRunningTotal] = useState(0); \n  const [previousOperator, setPreviousOperator] = useState(null); \n  const [newTotal, setNewTotal] = useState(true);\n  const [calculatedTotal, setCalculatedTotal] = useState(0);\n\n  const numberClick =  (number) => {\n\n    let tempTotal = runningTotal;\n    if ( runningTotal === 0 || newTotal){\n      if(calculatedTotal){\n        setPreviousTotal(calculatedTotal);\n      } else {\n        setPreviousTotal(runningTotal)\n      }\n      tempTotal = 0\n      setNewTotal(false);\n    }\n\n    setRunningTotal(parseFloat(\"\" + tempTotal + number));\n  }\n\n  const handleDecimal = () => {\n    if(!runningTotal.toString().includes(\".\"))\n    setRunningTotal(runningTotal + \".\")\n  }\n\n  const clearClick = () => {\n    if (runningTotal === 0) {\n      setPreviousOperator(null);\n      setPreviousTotal(null);\n      setCalculatedTotal(0);\n    }\n    setRunningTotal(0);\n  }\n\n  const operatorClick = (operator) => {\n    // if there was a previous operator recorded as having been clicked, perform\n      // the operation for the previous operator\n      if (previousTotal && previousOperator) {\n        switch (previousOperator) {\n          case \"+\":\n            add(runningTotal);\n            break;\n          case \"-\":\n            subtract(runningTotal);\n            break;\n          case \"*\":\n            multiply(runningTotal);\n            break;\n          case \"/\":\n            divide(runningTotal);\n            break;\n        }\n      }\n\n      // if the 'equals' button was clicked, clear the previous operator, otherwise\n      // record what the previous operator was\n      if (operator === \"=\") {\n        setPreviousOperator(null);\n      } else {\n        setPreviousOperator(operator);\n\n      }\n      // replace the previous total with the current running total and flag that a\n      // new total has been calculated\n      setPreviousTotal(runningTotal);\n      setNewTotal(true);\n  }\n\n  const add = (number) => {\n    let calculatedNumber = parseFloat(previousTotal) + parseFloat(number);\n    setRunningTotal(calculatedNumber);\n    setCalculatedTotal(calculatedNumber);\n  }\n\n  const subtract = (number) => {\n    let calculatedNumber = parseFloat(previousTotal) - parseFloat(number);\n    setRunningTotal(calculatedNumber);\n    setCalculatedTotal(calculatedNumber);\n  }\n\n  const multiply = (number) => {\n    let calculatedNumber = parseFloat(previousTotal) * parseFloat(number);\n    setRunningTotal(calculatedNumber);\n    setCalculatedTotal(calculatedNumber);\n  }\n\n  const divide = (number) => {\n    let calculatedNumber = parseFloat(previousTotal) / parseFloat(number);\n    setRunningTotal(calculatedNumber);\n    setCalculatedTotal(calculatedNumber);\n  }\n\n\n  return (\n    <div className=\"container\">\n    <div className=\"calculator\">\n      <div data-testid=\"running-total\" id=\"running-total\" className=\"display\">{ runningTotal }</div>\n      <KeyPad \n      handleNumber={numberClick} \n      handleOperator={operatorClick} \n      handleClear={clearClick}\n      handleDecimal={handleDecimal}\n      />\n    </div>\n  </div>\n  );\n}\n\nexport default App;\n"],"mappings":";;;AAAA,OAAOA,KAAP,IAAeC,QAAf,QAA8B,OAA9B;AACA,OAAOC,MAAP,MAAmB,sBAAnB;AACA,OAAO,YAAP;;;AAEA,SAASC,GAAT,GAAe;EAAA;;EAEb,MAAM,CAACC,aAAD,EAAgBC,gBAAhB,IAAoCJ,QAAQ,CAAC,CAAD,CAAlD;EACA,MAAM,CAACK,YAAD,EAAgBC,eAAhB,IAAmCN,QAAQ,CAAC,CAAD,CAAjD;EACA,MAAM,CAACO,gBAAD,EAAmBC,mBAAnB,IAA0CR,QAAQ,CAAC,IAAD,CAAxD;EACA,MAAM,CAACS,QAAD,EAAWC,WAAX,IAA0BV,QAAQ,CAAC,IAAD,CAAxC;EACA,MAAM,CAACW,eAAD,EAAkBC,kBAAlB,IAAwCZ,QAAQ,CAAC,CAAD,CAAtD;;EAEA,MAAMa,WAAW,GAAKC,MAAD,IAAY;IAE/B,IAAIC,SAAS,GAAGV,YAAhB;;IACA,IAAKA,YAAY,KAAK,CAAjB,IAAsBI,QAA3B,EAAoC;MAClC,IAAGE,eAAH,EAAmB;QACjBP,gBAAgB,CAACO,eAAD,CAAhB;MACD,CAFD,MAEO;QACLP,gBAAgB,CAACC,YAAD,CAAhB;MACD;;MACDU,SAAS,GAAG,CAAZ;MACAL,WAAW,CAAC,KAAD,CAAX;IACD;;IAEDJ,eAAe,CAACU,UAAU,CAAC,KAAKD,SAAL,GAAiBD,MAAlB,CAAX,CAAf;EACD,CAdD;;EAgBA,MAAMG,aAAa,GAAG,MAAM;IAC1B,IAAG,CAACZ,YAAY,CAACa,QAAb,GAAwBC,QAAxB,CAAiC,GAAjC,CAAJ,EACAb,eAAe,CAACD,YAAY,GAAG,GAAhB,CAAf;EACD,CAHD;;EAKA,MAAMe,UAAU,GAAG,MAAM;IACvB,IAAIf,YAAY,KAAK,CAArB,EAAwB;MACtBG,mBAAmB,CAAC,IAAD,CAAnB;MACAJ,gBAAgB,CAAC,IAAD,CAAhB;MACAQ,kBAAkB,CAAC,CAAD,CAAlB;IACD;;IACDN,eAAe,CAAC,CAAD,CAAf;EACD,CAPD;;EASA,MAAMe,aAAa,GAAIC,QAAD,IAAc;IAClC;IACE;IACA,IAAInB,aAAa,IAAII,gBAArB,EAAuC;MACrC,QAAQA,gBAAR;QACE,KAAK,GAAL;UACEgB,GAAG,CAAClB,YAAD,CAAH;UACA;;QACF,KAAK,GAAL;UACEmB,QAAQ,CAACnB,YAAD,CAAR;UACA;;QACF,KAAK,GAAL;UACEoB,QAAQ,CAACpB,YAAD,CAAR;UACA;;QACF,KAAK,GAAL;UACEqB,MAAM,CAACrB,YAAD,CAAN;UACA;MAZJ;IAcD,CAlB+B,CAoBhC;IACA;;;IACA,IAAIiB,QAAQ,KAAK,GAAjB,EAAsB;MACpBd,mBAAmB,CAAC,IAAD,CAAnB;IACD,CAFD,MAEO;MACLA,mBAAmB,CAACc,QAAD,CAAnB;IAED,CA3B+B,CA4BhC;IACA;;;IACAlB,gBAAgB,CAACC,YAAD,CAAhB;IACAK,WAAW,CAAC,IAAD,CAAX;EACH,CAhCD;;EAkCA,MAAMa,GAAG,GAAIT,MAAD,IAAY;IACtB,IAAIa,gBAAgB,GAAGX,UAAU,CAACb,aAAD,CAAV,GAA4Ba,UAAU,CAACF,MAAD,CAA7D;IACAR,eAAe,CAACqB,gBAAD,CAAf;IACAf,kBAAkB,CAACe,gBAAD,CAAlB;EACD,CAJD;;EAMA,MAAMH,QAAQ,GAAIV,MAAD,IAAY;IAC3B,IAAIa,gBAAgB,GAAGX,UAAU,CAACb,aAAD,CAAV,GAA4Ba,UAAU,CAACF,MAAD,CAA7D;IACAR,eAAe,CAACqB,gBAAD,CAAf;IACAf,kBAAkB,CAACe,gBAAD,CAAlB;EACD,CAJD;;EAMA,MAAMF,QAAQ,GAAIX,MAAD,IAAY;IAC3B,IAAIa,gBAAgB,GAAGX,UAAU,CAACb,aAAD,CAAV,GAA4Ba,UAAU,CAACF,MAAD,CAA7D;IACAR,eAAe,CAACqB,gBAAD,CAAf;IACAf,kBAAkB,CAACe,gBAAD,CAAlB;EACD,CAJD;;EAMA,MAAMD,MAAM,GAAIZ,MAAD,IAAY;IACzB,IAAIa,gBAAgB,GAAGX,UAAU,CAACb,aAAD,CAAV,GAA4Ba,UAAU,CAACF,MAAD,CAA7D;IACAR,eAAe,CAACqB,gBAAD,CAAf;IACAf,kBAAkB,CAACe,gBAAD,CAAlB;EACD,CAJD;;EAOA,oBACE;IAAK,SAAS,EAAC,WAAf;IAAA,uBACA;MAAK,SAAS,EAAC,YAAf;MAAA,wBACE;QAAK,eAAY,eAAjB;QAAiC,EAAE,EAAC,eAApC;QAAoD,SAAS,EAAC,SAA9D;QAAA,UAA0EtB;MAA1E;QAAA;QAAA;QAAA;MAAA,QADF,eAEE,QAAC,MAAD;QACA,YAAY,EAAEQ,WADd;QAEA,cAAc,EAAEQ,aAFhB;QAGA,WAAW,EAAED,UAHb;QAIA,aAAa,EAAEH;MAJf;QAAA;QAAA;QAAA;MAAA,QAFF;IAAA;MAAA;MAAA;MAAA;IAAA;EADA;IAAA;IAAA;IAAA;EAAA,QADF;AAaD;;GA9GQf,G;;KAAAA,G;AAgHT,eAAeA,GAAf"},"metadata":{},"sourceType":"module"}